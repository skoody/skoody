// ----------------------------------------------------------------
//  AIO Hacking Tool
// ----------------------------------------------------------------
//  Author: Jules
//  Version: 1.0.0
//
//  This script is an all-in-one hacking tool for GreyHack.
//  It includes a scanner, an auto-hacker, an anti-forensics
//  cleaner, and a security radar.
//
//  Usage:
//    Run the script and use the following commands:
//    - scan [ip]
//    - hack [ip]
//    - radar
//    - help
//    - exit
// ----------------------------------------------------------------

// ================================================================
//  Global Configuration & State
// ================================================================

Database = {}
DB_FILE_PATH = "/root/aio_database.txt"

// ================================================================
//  Database Module
//
//  Handles saving and loading of collected data to a text file.
//  The user requested a .txt file, so we'll store data in a
//  structured format (like JSON) within that file.
// ================================================================

// Helper to print formatted alerts.
print_alert = function(message)
    print("<color=red><b>[!] " + current_date + " - " + message + "</b></color>")
end function

// Prints the help message for the tool.
print_help = function()
    print("")
    print("<b>AIO Tool Commands:</b>")
    print("  scan [ip]      - Scans a target IP for open ports and services.")
    print("  hack [ip]      - Scans and attempts to exploit a target IP.")
    print("  radar          - Starts the security radar to monitor your system.")
    print("  bank show      - Shows all collected bank account information.")
    print("  help           - Shows this help message.")
    print("  exit           - Exits the tool.")
    print("")
end function

Database.data = {}

// Initializes the database: creates the file if it doesn't exist and loads it.
Database.init = function()
    host_computer = get_shell.host_computer
    db_file = host_computer.File(DB_FILE_PATH)

    if db_file == null then
        print("Database file not found. Creating a new one...")
        host_computer.touch("/root", "aio_database.txt")
    end if

    Database.load()
    print("Database initialized and loaded.")
end function

// Loads the database from the file using a simple line-based parser.
Database.load = function()
    Database.data = {"hosts":{}}
    host_computer = get_shell.host_computer
    db_file = host_computer.File(DB_FILE_PATH)
    if db_file == null then return

    content = db_file.get_content
    if content == null or content == "" then return

    lines = content.split(char(10))
    current_host_ip = null

    for line in lines
        if line == "" then continue

        first_colon = line.indexOf(":")
        if first_colon == -1 then continue // Malformed line, skip

        key = line[0:first_colon]
        value = line[first_colon+1:]

        if key == "HOST_START" then
            current_host_ip = value
            if not Database.data.hosts.hasIndex(current_host_ip) then
                 Database.data.hosts[current_host_ip] = {"ports":{},"credentials":[],"files":[],"last_scanned":null}
            end if
        else if key == "HOST_END" then
            current_host_ip = null
        else if current_host_ip != null then
            // Now, for keys that have multiple parts in their value, we split `value`
            if key == "LAST_SCANNED" then
                Database.data.hosts[current_host_ip].last_scanned = value
            else if key == "PORT" then
                parts = value.split(":")
                Database.data.hosts[current_host_ip].ports[parts[0]] = parts[1]
            else if key == "CRED" then
                parts = value.split(":")
                Database.data.hosts[current_host_ip].credentials.push({"type":parts[0],"user":parts[1],"pass":parts[2]})
            else if key == "FILE" then
                // The file path is the first part, the rest is content
                first_colon_in_value = value.indexOf(":")
                path = ""
                content = ""
                if first_colon_in_value == -1 then
                    path = value
                else
                    path = value[0:first_colon_in_value]
                    content = value[first_colon_in_value+1:]
                end if
                decoded_content = content.replace("<NEWLINE>", char(10))
                Database.data.hosts[current_host_ip].files.push({"path":path,"content":decoded_content})
            end if
        end if
    end for
    print("Database loaded from file.")
end function

// Saves the current database state to a file using a simple line-based format.
Database.save = function()
    lines = []
    for ip in Database.data.hosts.indexes
        host = Database.data.hosts[ip]
        lines.push("HOST_START:" + ip)
        if host.last_scanned != null then lines.push("LAST_SCANNED:" + host.last_scanned)

        for port in host.ports.indexes
            lines.push("PORT:" + port + ":" + host.ports[port])
        end for

        for cred in host.credentials
            lines.push("CRED:" + cred.type + ":" + cred.user + ":" + cred.pass)
        end for

        for file in host.files
            encoded_content = file.content.replace(char(10), "<NEWLINE>")
            lines.push("FILE:" + file.path + ":" + encoded_content)
        end for

        lines.push("HOST_END:" + ip)
    end for

    host_computer = get_shell.host_computer
    db_file = host_computer.File(DB_FILE_PATH)
    result = db_file.set_content(lines.join(char(10)))
    if result != 1 then
        print("Error: Failed to save database!")
    end if
end function

// Checks if a host exists in the database.
Database.host_exists = function(ip)
    return Database.data.hosts.hasIndex(ip)
end function

// Gets a host's data from the database.
Database.get_host = function(ip)
    if not Database.host_exists(ip) then return null
    return Database.data.hosts[ip]
end function

// Adds a new host to the database.
Database.add_host = function(ip)
    if Database.host_exists(ip) then return
    Database.data.hosts[ip] = {"ports":{},"credentials":[],"files":[],"last_scanned":null}
    Database.save()
end function

// Adds a found file to a host's record.
Database.add_file = function(ip, filepath, content)
    if not Database.host_exists(ip) then Database.add_host(ip)
    Database.data.hosts[ip].files.push({"path":filepath,"content":content})
    Database.save()
end function

// Adds a port to a host.
Database.add_port = function(ip, port, service)
    if not Database.host_exists(ip) then Database.add_host(ip)
    Database.data.hosts[ip].ports[str(port)] = service
    Database.data.hosts[ip].last_scanned = current_date
    Database.save()
end function

// Adds credentials to a host.
Database.add_credential = function(ip, type, user, pass)
     if not Database.host_exists(ip) then Database.add_host(ip)
     Database.data.hosts[ip].credentials.push({"type":type,"user":user,"pass":pass})
     Database.save()
end function

// Main function and command loop for the tool.
main = function()
    Database.init()
    BankDatabase.init()

    print("----------------------------------------------------")
    print("  Welcome to the All-In-One Hacking Tool (AIO)")
    print("  Version: 1.0.0")
    print("  Type 'help' for a list of commands.")
    print("----------------------------------------------------")

    while true
        input = user_input(char(10) + "AIO > ")
        if input == null or input == "" then continue

        parts = input.split(" ")
        command = parts[0].lower

        if command == "scan" then
            if parts.len < 2 then
                print("Usage: scan [target_ip]")
            else
                UniversalScanner.scan(parts[1])
            end if
        else if command == "hack" then
            if parts.len < 2 then
                print("Usage: hack [target_ip]")
            else
                found_sessions = AutoHacker.hack(parts[1])
                if found_sessions.len > 0 then
                    AutoHacker.manage_sessions(found_sessions)
                else
                    print("No interactive sessions were obtained.")
                end if
            end if
        else if command == "radar" then
            SecurityRadar.start()
        else if command == "bank" then
            if parts.len > 1 and parts[1].lower == "show" then
                BankManager.show()
            else
                print("Usage: bank show")
            end if
        else if command == "help" then
            print_help()
        else if command == "exit" then
            exit("AIO Tool terminated.")
        else
            print("Unknown command. Type 'help' for a list of commands.")
        end if
    end while
end function

// ================================================================
//  Modules
// ================================================================

// ================================================================
//  Bank Database Module
// ================================================================
BankManager = {}
BankManager.show = function()
    print("")
    print("--- Bank Account Database ---")
    if BankDatabase.data.len == 0 then
        print("  (No accounts stored)")
    else
        for entry in BankDatabase.data
            line = "  - User: " + entry.user + ", Hash: " + entry.raw_hash + ", Cracked: " + entry.cracked_pass
            print(line)
        end for
    end if
    print("-----------------------------")
end function

BankDatabase = {}
BankDatabase.data = []

BankDatabase.init = function()
    host_computer = get_shell.host_computer
    db_file = host_computer.File("/root/bank_database.txt")

    if db_file == null then
        print("Bank database not found. Creating a new one...")
        host_computer.touch("/root", "bank_database.txt")
    end if
    BankDatabase.load()
end function

BankDatabase.load = function()
    host_computer = get_shell.host_computer
    db_file = host_computer.File("/root/bank_database.txt")
    if db_file == null then return

    content = db_file.get_content
    if content == null or content == "" then return

    lines = content.split(char(10))
    for line in lines
        if line == "" then continue
        parts = line.split(":")
        if parts.len < 3 then continue

        BankDatabase.data.push({"user": parts[0], "raw_hash": parts[1], "cracked_pass": parts[2]})
    end for
end function

BankDatabase.save = function()
    lines = []
    for entry in BankDatabase.data
        line = entry.user + ":" + entry.raw_hash + ":" + entry.cracked_pass
        lines.push(line)
    end for

    host_computer = get_shell.host_computer
    db_file = host_computer.File("/root/bank_database.txt")
    if db_file == null then return

    // Use [0] to handle GreyScript's join() quirk
    result = db_file.set_content(lines.join(char(10))[0])
    if result != 1 then
        print("Error: Failed to save bank database!")
    end if
end function

BankDatabase.add_entry = function(user, raw_hash, cracked_pass)
    // Avoid duplicates
    for entry in BankDatabase.data
        if entry.user == user and entry.raw_hash == raw_hash then
            return // Entry already exists
        end if
    end for

    BankDatabase.data.push({"user": user, "raw_hash": raw_hash, "cracked_pass": cracked_pass})
    BankDatabase.save()
end function

SecurityRadar = {}
SecurityRadar.last_log_size = 0

// Starts the continuous monitoring of the local machine's logs.
SecurityRadar.start = function()
    print("Security Radar activated. Monitoring local logs...")
    my_ip = get_shell.host_computer.public_ip

    while true
        log_file = get_shell.host_computer.File("/var/system.log")
        if log_file == null then
            print("Error: /var/system.log not found. Cannot monitor.")
            return
        end if

        log_content = log_file.get_content
        if log_content == null or log_content == "" then
            wait(5) // Wait longer if log is empty
            continue
        end if

        lines = log_content.split(char(10))
        current_log_size = lines.len

        if SecurityRadar.last_log_size == 0 then // First run
            SecurityRadar.last_log_size = current_log_size
        else if current_log_size > SecurityRadar.last_log_size then
            new_lines = lines[SecurityRadar.last_log_size:]
            print_alert("--- NEW SECURITY ALERTS ---")
            for line in new_lines
                // Very basic parsing logic. This would need to be improved
                // based on the actual log format.
                if line.indexOf("Connection established from") != null then
                    parts = line.split("from ")
                    if parts.len > 1 and parts[1] != my_ip then
                        print_alert("Foreign login detected from " + parts[1])
                    end if
                else if line.indexOf("Port scan") != null then
                     parts = line.split("from ")
                     if parts.len > 1 then
                         print_alert("Port scan detected from " + parts[1])
                     end if
                else if line.indexOf("exploit attempt") != null or line.indexOf("overflow") != null then
                     parts = line.split("from ")
                     if parts.len > 1 then
                         print_alert("Exploit attempt detected from " + parts[1])
                     end if
                end if
            end for
            SecurityRadar.last_log_size = current_log_size
        end if

        wait(2) // Check logs every 2 seconds
    end while
end function

UniversalScanner = {}
// ================================================================
//  Simplified Looter Module
// ================================================================
Looter = {}

Looter.run = function(session)
    if session == null then return
    print("")
    print("--- Running Looter for " + session.user + "@" + session.ip + " ---")

    if session.type == "shell" then
        computer = session.object.host_computer
        if computer == null then return
        Looter.loot_passwd_from_computer(computer)
        Looter.loot_bank_from_computer(computer)
    else if session.type == "file" then
        file_obj = session.object
        if file_obj == null then return
        Looter.loot_passwd_from_file(file_obj)
    end if
    print("--- Looter finished ---")
end function

Looter.loot_passwd_from_computer = function(computer)
    passwd_file = computer.File("/etc/passwd")
    if passwd_file == null then return
    if not passwd_file.has_permission("r") then return
    content = passwd_file.get_content
    if content == null then return

    print("  [+] Found /etc/passwd. Cracking...")
    Looter.parse_and_crack_passwd(content)
end function

Looter.loot_passwd_from_file = function(start_file)
    // First, navigate up to root
    root_dir = start_file
    for i in range(50)
        if root_dir.path == "/" then break
        if root_dir.parent == null then return
        root_dir = root_dir.parent
    end for
    if root_dir.path != "/" then return

    // Now, navigate down to /etc/passwd
    etc_dir = null
    folders = root_dir.get_folders
    if folders == null then return
    for f in folders
        if f.name == "etc" then
            etc_dir = f
            break
        end if
    end for
    if etc_dir == null then return

    passwd_file = null
    files = etc_dir.get_files
    if files == null then return
    for f in files
        if f.name == "passwd" then
            passwd_file = f
            break
        end if
    end for
    if passwd_file == null then return
    if not passwd_file.has_permission("r") then return

    content = passwd_file.get_content
    if content == null then return

    print("  [+] Found /etc/passwd from file session. Cracking...")
    Looter.parse_and_crack_passwd(content)
end function

Looter.loot_bank_from_computer = function(computer)
    homeFolder = computer.File("/home")
    if homeFolder == null then return

    userFolders = homeFolder.get_folders
    if userFolders == null then return

    for userFolder in userFolders
        bankFile = computer.File("/home/" + userFolder.name + "/Config/Bank.txt")
        if bankFile == null then continue
        if not bankFile.has_permission("r") then continue

        content = bankFile.get_content
        if content == null then continue

        print("  [+] Found Bank.txt for user '" + userFolder.name + "'. Deciphering...")
        Looter.parse_and_crack_bank(content)
    end for
end function

Looter.parse_and_crack_passwd = function(content)
    crypto = include_lib("/lib/crypto.so")
    if crypto == null then return

    lines = content.split(char(10))
    for line in lines
        if line == "" then continue
        parts = line.split(":")
        if parts.len < 2 then continue
        username = parts[0]
        hash = parts[1]
        if hash != "x" and hash != "" then
            password = crypto.decipher(hash)
            if password != null then
                print("    - Cracked /etc/passwd -> " + username + ":" + password)
            end if
        end if
    end for
end function

Looter.parse_and_crack_bank = function(content)
    crypto = include_lib("/lib/crypto.so")
    if crypto == null then return

    lines = content.split(char(10))
    for line in lines
        if line == "" then continue
        line_parts = line.split(":")
        if line_parts.len != 2 then continue

        user_domain_str = line_parts[0]
        hash_to_decipher = line_parts[1]

        user = user_domain_str

        cracked_pass = crypto.decipher(hash_to_decipher)
        if cracked_pass != null then
            BankDatabase.add_entry(user, hash_to_decipher, cracked_pass)
        end if
    end for
end function

// ================================================================
//  Looter Module (based on user-provided code)
// ================================================================
Looter = {}

Looter.run = function(session)
    if session == null then return
    print("")
    print("--- Running Looter for " + session.user + "@" + session.ip + " ---")

    if session.type == "shell" then
        computer = session.object.host_computer
        if computer == null then return
        Looter.loot_passwd_from_computer(computer)
        Looter.loot_bank_from_computer(computer)
    else if session.type == "file" then
        file_obj = session.object
        if file_obj == null then return
        Looter.loot_passwd_from_file(file_obj)
    end if
    print("--- Looter finished ---")
end function

Looter.loot_passwd_from_computer = function(computer)
    passwd_file = computer.File("/etc/passwd")
    if passwd_file == null then return
    if not passwd_file.has_permission("r") then return
    content = passwd_file.get_content
    if content == null then return

    print("  [+] Found /etc/passwd. Cracking...")
    Looter.parse_and_crack_passwd(content)
end function

Looter.loot_passwd_from_file = function(start_file)
    root_dir = start_file
    for i in range(50)
        if root_dir.path == "/" then break
        if root_dir.parent == null then return
        root_dir = root_dir.parent
    end for
    if root_dir.path != "/" then return

    etc_dir = null
    folders = root_dir.get_folders
    if folders == null then return
    for f in folders
        if f.name == "etc" then
            etc_dir = f
            break
        end if
    end for
    if etc_dir == null then return

    passwd_file = null
    files = etc_dir.get_files
    if files == null then return
    for f in files
        if f.name == "passwd" then
            passwd_file = f
            break
        end if
    end for
    if passwd_file == null then return
    if not passwd_file.has_permission("r") then return

    content = passwd_file.get_content
    if content == null then return

    print("  [+] Found /etc/passwd from file session. Cracking...")
    Looter.parse_and_crack_passwd(content)
end function

Looter.loot_bank_from_computer = function(computer)
    homeFolder = computer.File("/home")
    if homeFolder == null then return

    userFolders = homeFolder.get_folders
    if userFolders == null then return

    for userFolder in userFolders
        bankFile = computer.File("/home/" + userFolder.name + "/Config/Bank.txt")
        if bankFile == null then continue
        if not bankFile.has_permission("r") then continue

        content = bankFile.get_content
        if content == null then continue

        print("  [+] Found Bank.txt for user '" + userFolder.name + "'. Deciphering...")
        Looter.parse_and_crack_bank(content)
    end for
end function

Looter.parse_and_crack_passwd = function(content)
    crypto = include_lib("/lib/crypto.so")
    if crypto == null then return

    lines = content.split(char(10))
    for line in lines
        if line == "" then continue
        parts = line.split(":")
        if parts.len < 2 then continue
        username = parts[0]
        hash = parts[1]
        if hash != "x" and hash != "" then
            password = crypto.decipher(hash)
            if password != null then
                print("    - Cracked /etc/passwd -> " + username + ":" + password)
            end if
        end if
    end for
end function

Looter.parse_and_crack_bank = function(content)
    crypto = include_lib("/lib/crypto.so")
    if crypto == null then return

    lines = content.split(char(10))
    for line in lines
        if line == "" then continue
        line_parts = line.split(":")
        if line_parts.len != 2 then continue

        user_domain_str = line_parts[0]
        hash_to_decipher = line_parts[1]

        user = user_domain_str

        cracked_pass = crypto.decipher(hash_to_decipher)
        if cracked_pass != null then
            print("    - Cracked Bank.txt -> User: " + user + ", Pass: " + cracked_pass)
        end if
    end for
end function

UniversalScanner.scan = function(target_ip)
    if not is_valid_ip(target_ip) then
        print("Scan Error: Invalid IP address.")
        return
    end if

    // --- DIG Cache Logic ---
    host_data = Database.get_host(target_ip)
    if host_data != null and host_data.last_scanned != null then
        print("Host " + target_ip + " has been scanned recently (" + host_data.last_scanned + "). Using cached data.")
        print("Known open ports:")
        for port in host_data.ports.indexes
            print("  [+] Port " + port + ": " + host_data.ports[port])
        end for
        if host_data.ports.len == 0 then print("  (None)")
        return
    end if
    // --- End DIG Cache Logic ---

    print("Scanning " + target_ip + "...")

    isLan = is_lan_ip(target_ip)

    router = null
    if isLan then
        router = get_router
    else
        router = get_router(target_ip)
    end if

    if router == null then
        print("Scan Error: Could not get router for IP " + target_ip + ". Is it reachable?")
        return
    end if

    ports = null
    if isLan then
        ports = router.device_ports(target_ip)
    else
        ports = router.used_ports
    end if

    if ports == null or typeof(ports) == "string" or ports.len == 0 then
        print("No open ports found on " + target_ip)
        Database.add_host(target_ip) // Add host to DB even if no ports are open, to avoid re-scanning
        Database.data.hosts[target_ip].last_scanned = current_date
        Database.save()
        return
    end if

    print("Full port scan results for " + target_ip + ":")
    print("PORT   STATUS   SERVICE      LAN IP")

    if not Database.host_exists(target_ip) then Database.add_host(target_ip)

    for port in ports
        port_num = port.port_number
        status = "OPEN"
        if port.is_closed and not isLan then status = "CLOSED"

        service_info = router.port_info(port)
        service_name = "unknown"
        if service_info != null and service_info != "" then
            service_name = service_info.split(" ")[0]
        end if

        lan_ip = port.get_lan_ip or "N/A"

        // Build a formatted line
        line = ""
        line = line + str(port_num) + " " * (7 - str(port_num).len)
        line = line + status + " " * (9 - status.len)
        line = line + service_name + " " * (13 - service_name.len)
        line = line + lan_ip
        print(line)

        if status == "OPEN" then
            Database.add_port(target_ip, port_num, service_name)
        end if
    end for

    Database.data.hosts[target_ip].last_scanned = current_date
    Database.save()

    print("Scan complete for " + target_ip)
end function

AutoHacker = {}

// Generates a random alphanumeric password.
AutoHacker.generate_password = function(length)
    chars = "abcdefghijklmnopqrstuvwxyz0123456789"
    password = ""
    for i in range(length)
        password = password + chars[floor(rnd * chars.len)]
    end for
    return password
end function

// Infers the user of a shell session by checking permissions on key directories.
AutoHacker.determine_shell_user = function(shell)
    computer = shell.host_computer
    if computer == null then return "unknown"

    // 1. Check for root access using advanced permission checks
    root_dir = computer.File("/root")
    if root_dir != null then
        if root_dir.has_permission("r") then
            return "root"
        end if
    end if

    // 2. Check for user access in /home
    home_dir = computer.File("/home")
    if home_dir != null and home_dir.is_folder then
        user_dirs = home_dir.get_folders
        if user_dirs != null then
            for user_dir in user_dirs
                // The first home directory we can read is ours.
                if user_dir.has_permission("r") then
                    return user_dir.name
                end if
            end for
        end if
    end if

    // 3. Fallback, default to guest if not root or a specific user
    return "guest"
end function

// Infers the user of a file object by navigating the filesystem and checking permissions.
AutoHacker.determine_file_user = function(file_obj)
    if file_obj == null then return "unknown"

    // --- Step 1: Navigate up to the root directory ---
    root_dir = file_obj
    for i in range(50) // Safety break
        if root_dir.path == "/" then break
        if root_dir.parent == null then return "unknown" // Cannot determine if we can't get to root
        root_dir = root_dir.parent
    end for

    if root_dir.path != "/" then return "unknown" // Failed to find root

    // --- Step 2: From root, check for access to /root folder ---
    // This is the definitive check for root privileges.
    folders = root_dir.get_folders
    if folders != null then
        for folder in folders
            if folder.name == "root" and folder.has_permission("r") then
                return "root"
            end if
        end for
    end if

    // --- Step 3: If not root, check for access to /home user folders ---
    home_dir = null
    folders = root_dir.get_folders
    if folders != null then
        for folder in folders
            if folder.name == "home" then
                home_dir = folder
                break
            end if
        end for
    end if

    if home_dir != null and home_dir.is_folder then
        user_dirs = home_dir.get_folders
        if user_dirs != null then
            for user_dir in user_dirs
                // The first home directory we can read is ours.
                if user_dir.has_permission("r") then
                    return user_dir.name
                end if
            end for
        end if
    end if

    // --- Step 4: If no specific user access found, assume guest ---
    return "guest"
end function

AutoHacker.manage_sessions = function(sessions)
    if sessions == null or sessions.len == 0 then return

    while true
        print("")
        print("--- Interactive Sessions ---")
        for i in sessions.indexes
            session = sessions[i]
            print("  [" + (i+1) + "] " + session.type + " - " + session.user + "@" + session.ip)
        end for
        print("--------------------------")

        choice = user_input("Select a session to interact with (or 'exit'): ")
        if choice == "exit" then break

        choice_num = choice.to_int
        if choice_num > 0 and choice_num <= sessions.len then
            session = sessions[choice_num - 1]
            if session.type == "shell" then
                AutoHacker.handle_shell_session(session)
            else if session.type == "file" then
                AutoHacker.handle_file_session(session)
            end if
        else
            print("Invalid selection.")
        end if
    end while
end function

// Handles the interactive shell session.
AutoHacker.handle_shell_session = function(session)
    shell = session.object
    prompt = session.user + "@" + session.ip + "> "

    print("")
    print("--- Opened shell session ---")
    print("Type 'help' for a list of special commands, or any remote command.")
    print("Type 'exit' to return to the session menu.")

    while true
        input = user_input(prompt)
        if input == null or input == "" then continue

        parts = input.split(" ")
        command = parts[0].lower
        args = ""
        if parts.len > 1 then
            args = parts[1:]
        end if

        if command == "exit" or command == "back" then
            break
        else if command == "help" then
            print("Special commands:")
            print("  run_crack   - Attempts to crack passwords from /etc/passwd.")
            print("  run_clean   - Runs the anti-forensics module to clean logs.")
            print("  exit / back - Returns to the session menu.")
            print("Any other command will be executed on the remote shell.")
        else if command == "run_crack" then
            print("--- Running password cracker... ---")
            AutoHacker.crack_passwords(shell, session.ip)
            print("--- Password cracker finished. ---")
        else if command == "run_clean" then
            print("--- Running anti-forensics... ---")
            AntiForensics.clean(shell)
            print("--- Anti-forensics finished. ---")
        else
            // Execute on remote shell
            arg_string = ""
            if typeof(args) == "list" then
                arg_string = args.join(" ")
            end if

            result = shell.launch(command, arg_string)
            if typeof(result) == "string" then
                print("Error: " + result)
            end if
        end if
    end while
end function

// Handles the interactive file browser session.
AutoHacker.handle_file_session = function(session)
    current_dir = session.object

    print("")
    print("--- Opening file browser session with " + session.user + "@" + session.ip + " ---")
    // If the initial object is a file, start in its parent directory.
    if not current_dir.is_folder then
        print("Initial object is a file, starting in parent directory.")
        current_dir = current_dir.parent
        if current_dir == null then
            print("Error: Could not access parent directory.")
            return
        end if
    end if
    print("Initial path: " + current_dir.path)
    print("Type 'help' for commands. Type 'exit' to return.")

    while true
        prompt = session.user + "@" + session.ip + ":" + current_dir.path + "> "
        input = user_input(prompt)
        if input == null or input == "" then continue

        parts = input.split(" ")
        command = parts[0].lower
        arg = ""
        if parts.len > 1 then arg = parts[1]

        if command == "exit" or command == "back" then
            break
        else if command == "help" then
            print("File Browser Commands:")
            print("  ls          - Lists files and directories.")
            print("  cd <folder> - Changes directory (supports '..' for parent).")
            print("  cat <file>  - Displays the content of a file.")
            print("  pwd         - Shows the current path.")
            print("  exit / back - Returns to the session menu.")
        else if command == "pwd" then
            print(current_dir.path)
        else if command == "ls" then
            if not current_dir.is_folder then
                print("Error: Not a directory.")
                continue
            end if
            print("Contents of " + current_dir.path + ":")
            for f in current_dir.get_folders
                print("  <DIR>  " + f.name)
            end for
            for f in current_dir.get_files
                print("         " + f.name)
            end for
        else if command == "cd" then
            if arg == "" then continue
            if arg == ".." then
                parent = current_dir.parent
                if parent != null then current_dir = parent
            else
                found = false
                for f in current_dir.get_folders
                    if f.name == arg then
                        current_dir = f
                        found = true
                        break
                    end if
                end for
                if not found then print("Error: Directory not found: " + arg)
            end if
        else if command == "cat" then
            if arg == "" then continue
            found = false
            for f in current_dir.get_files
                if f.name == arg then
                    if f.has_permission("r") then
                        print(f.get_content)
                    else
                        print("Error: Permission denied.")
                    end if
                    found = true
                    break
                end if
            end for
            if not found then print("Error: File not found: " + arg)
        else
            print("Unknown command. Type 'help'.")
        end if
    end while
end function

// Main function to orchestrate the hack against a target IP.
// This function now returns a list of collected session objects.
AutoHacker.hack = function(target_ip)
    sessions = []
    print("")
    print("--- Starting hack on " + target_ip + " ---")

    // Step 1: Ensure we have scan data.
    if not Database.host_exists(target_ip) or Database.get_host(target_ip).last_scanned == null then
        print("Host not in database or not scanned. Scanning first...")
        UniversalScanner.scan(target_ip)
    end if

    host_data = Database.get_host(target_ip)
    if host_data == null or host_data.ports.len == 0 then
        print("No open ports found for " + target_ip + ". Cannot proceed with exploit scan.")
        return sessions
    end if

    print("Beginning exploit scan on " + host_data.ports.len + " open ports.")

    // Step 2: Attempt to exploit services on open ports.
    metax = include_lib("/lib/metaxploit.so")
    if metax == null then
        print("Error: Metaxploit library not found. Aborting.")
        return sessions
    end if

    router = get_router(target_ip)
    if router == null then
        print("Error: Could not get router for IP " + target_ip + ". Aborting.")
        return sessions
    end if

    for port_str in host_data.ports.indexes
        port_num = port_str.to_int
        print("  -> Probing port " + port_num + "...")
        net_session = metax.net_use(target_ip, port_num)

        if net_session == null then continue

        meta_lib = net_session.dump_lib()
        if meta_lib == null then continue

        print("    Found library: " + meta_lib.lib_name + " v" + meta_lib.version)
        vuln_areas = metax.scan(meta_lib)

        if vuln_areas == null or vuln_areas.len == 0 then continue

        print("    [+] Found " + vuln_areas.len + " potential vulnerabilities. Analyzing...")

        for area in vuln_areas
            details = metax.scan_address(meta_lib, area)

            exploit_name = null
            requirement = null

            // 1. Parse exploit name
            name_segments = details.split("<b>")
            if name_segments.len > 1 then
                exploit_name = name_segments[1].split("</b>")[0]
            end if
            if exploit_name == null then continue

            // 2. Parse requirement
            if details.indexOf("*Requires:") != -1 then
                req_segments = details.split("\*Requires:")
                if req_segments.len > 1 then
                    requirement = req_segments[1].trim.split(" ")[0].lower
                end if
            end if

            print("      [+] Found exploit: " + exploit_name + " (Requirement: " + (requirement or "None") + ")")

            // 3. Prepare optArgs and decide if we can attempt the exploit
            optArgs = "" // Default to empty string to avoid "Invalid arguments" error
            can_attempt = true // Be optimistic and attempt exploit by default

            if requirement == "password" then
                optArgs = AutoHacker.generate_password(8)
                print("        Generated password for exploit: " + optArgs)
            else if requirement == "lan_ip" then
                port_object = router.ping_port(port_num)
                if port_object != null then
                    optArgs = port_object.get_lan_ip
                    if optArgs != null and optArgs != "" then
                       print("        Found LAN IP for exploit: " + optArgs)
                    else
                       print("        Error: Could not determine LAN IP. Skipping exploit.")
                       can_attempt = false // We know the req but can't fulfill it
                    end if
                else
                    print("        Error: Could not ping port to find LAN IP. Skipping exploit.")
                    can_attempt = false // We know the req but can't fulfill it
                end if
            end if
            // For null or other unknown requirements, we will still try with empty optArgs.

            if can_attempt then
                print("      Attempting exploit: " + exploit_name)
                result = meta_lib.overflow(area, exploit_name, optArgs)

                if result != null then
                    print("      [SUCCESS] Exploit successful!")
                    session_type = typeof(result)
                    user_context = "unknown"

                    if session_type == "file" then
                        user_context = AutoHacker.determine_file_user(result)
                    else if session_type == "shell" then
                        user_context = AutoHacker.determine_shell_user(result)
                    end if

                    if session_type == "shell" or session_type == "file" then
                        print("        Got a " + session_type + "! Storing session for user '" + user_context + "'.")
                        new_session = {"type":session_type, "user":user_context, "object":result, "ip":target_ip}
                        sessions.push(new_session)
                        Looter.run(new_session)
                    else
                        print("        Exploit returned a " + session_type + ". Not an interactive session.")
                    end if
                end if
            end if
        end for
    end for

    print("--- Hack scan finished on " + target_ip + " ---")
    return sessions
end function

Looter.parse_and_crack_passwd = function(content)
    crypto = include_lib("/lib/crypto.so")
    if crypto == null then return

    lines = content.split(char(10))
    for line in lines
        if line == "" then continue
        parts = line.split(":")
        if parts.len < 2 then continue
        username = parts[0]
        hash = parts[1]
        if hash != "x" and hash != "" then
            password = crypto.decipher(hash)
            if password != null then
                print("    - Cracked /etc/passwd -> " + username + ":" + password)
            end if
        end if
    end for
end function

AntiForensics = {}

// Cleans up traces from a remote computer after a successful hack.
AntiForensics.clean = function(shell)
    if shell == null then return
    print("      Starting anti-forensics cleanup...")

    computer = shell.host_computer

    // 1. Delete /var/log
    log_file = computer.File("/var/log")
    if log_file != null then
        result = log_file.delete
        if result == "" then
            print("        - /var/log deleted successfully.")
        else
            print("        - Failed to delete /var/log: " + result)
        end if
    end if

    // 2. Truncate .bash_history for root.
    // A more advanced version would find all users and clean their history too.
    history_file = computer.File("/root/.bash_history")
    if history_file != null then
        result = history_file.set_content("")
        if result == 1 then
            print("        - /root/.bash_history truncated.")
        else
            print("        - Failed to truncate /root/.bash_history.")
        end if
    end if

    // 3. Clean /tmp directory
    tmp_folder = computer.File("/tmp")
    if tmp_folder != null and tmp_folder.is_folder then
        // Delete files in /tmp
        files = tmp_folder.get_files
        if files != null then
            for file in files
                file.delete
            end for
        end if

        // Delete folders in /tmp
        folders = tmp_folder.get_folders
        if folders != null then
            for folder in folders
                folder.delete
            end for
        end if
        print("        - /tmp directory cleaned.")
    end if

    print("      Anti-forensics cleanup complete.")
end function

// ================================================================
//  Script Entry Point
// ================================================================

main()
